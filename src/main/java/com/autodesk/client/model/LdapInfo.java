
package com.autodesk.client.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;


//Generated by http://www.jsonschema2pojo.org/

public class LdapInfo {

@JsonProperty("ldapEnabled")
private Boolean ldapEnabled;
@JsonProperty("domainName")
private String domainName;
@JsonIgnore
private Map<String, Object> additionalProperties = new HashMap<String, Object>();

/**
* No args constructor for use in serialization
*
*/
public LdapInfo() {
}

/**
*
* @param domainName
* @param ldapEnabled
*/
public LdapInfo(Boolean ldapEnabled, String domainName) {
super();
this.ldapEnabled = ldapEnabled;
this.domainName = domainName;
}

@JsonProperty("ldapEnabled")
public Boolean getLdapEnabled() {
return ldapEnabled;
}

@JsonProperty("ldapEnabled")
public void setLdapEnabled(Boolean ldapEnabled) {
this.ldapEnabled = ldapEnabled;
}

@JsonProperty("domainName")
public String getDomainName() {
return domainName;
}

@JsonProperty("domainName")
public void setDomainName(String domainName) {
this.domainName = domainName;
}

@JsonAnyGetter
public Map<String, Object> getAdditionalProperties() {
return this.additionalProperties;
}

@JsonAnySetter
public void setAdditionalProperty(String name, Object value) {
this.additionalProperties.put(name, value);
}

@Override
public String toString() {
return new ToStringBuilder(this).append("ldapEnabled", ldapEnabled).append("domainName", domainName).append("additionalProperties", additionalProperties).toString();
}

@Override
public int hashCode() {
return new HashCodeBuilder().append(additionalProperties).append(ldapEnabled).append(domainName).toHashCode();
}

@Override
public boolean equals(Object other) {
if (other == this) {
return true;
}
if ((other instanceof LdapInfo) == false) {
return false;
}
LdapInfo rhs = ((LdapInfo) other);
return new EqualsBuilder().append(additionalProperties, rhs.additionalProperties).append(ldapEnabled, rhs.ldapEnabled).append(domainName, rhs.domainName).isEquals();
}

}